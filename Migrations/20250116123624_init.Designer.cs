// <auto-generated />
using System;
using CandidateScreeningAI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CandidateScreeningAI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250116123624_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CandidateScreeningAI.Models.Candidate", b =>
                {
                    b.Property<int>("CandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CandidateId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Skills")
                        .HasColumnType("text");

                    b.Property<decimal>("YearsOfExperience")
                        .HasColumnType("numeric");

                    b.HasKey("CandidateId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("CandidateScreeningAI.Models.Configuration", b =>
                {
                    b.Property<string>("ConfigKey")
                        .HasColumnType("text");

                    b.Property<string>("ConfigValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ConfigKey");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("CandidateScreeningAI.Models.InterviewWorkflow", b =>
                {
                    b.Property<int>("InterviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InterviewId"));

                    b.Property<int>("CandidateId")
                        .HasColumnType("integer");

                    b.Property<string>("Decision")
                        .HasColumnType("text");

                    b.Property<string>("InterviewStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("JobDescriptionJobId")
                        .HasColumnType("integer");

                    b.Property<int>("JobId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("InterviewId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("JobDescriptionJobId");

                    b.ToTable("InterviewWorkflows");
                });

            modelBuilder.Entity("CandidateScreeningAI.Models.JobDescription", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JobId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text");

                    b.Property<string>("LocationPreference")
                        .HasColumnType("text");

                    b.Property<decimal>("MinExperience")
                        .HasColumnType("numeric");

                    b.Property<string>("SkillsRequired")
                        .HasColumnType("text");

                    b.HasKey("JobId");

                    b.ToTable("JobDescriptions");
                });

            modelBuilder.Entity("CandidateScreeningAI.Models.Resume", b =>
                {
                    b.Property<int>("ResumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ResumeId"));

                    b.Property<int>("CandidateId")
                        .HasColumnType("integer");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<string>("ParsedContent")
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ResumeId");

                    b.HasIndex("CandidateId");

                    b.ToTable("Resumes");
                });

            modelBuilder.Entity("CandidateScreeningAI.Models.InterviewWorkflow", b =>
                {
                    b.HasOne("CandidateScreeningAI.Models.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CandidateScreeningAI.Models.JobDescription", "JobDescription")
                        .WithMany("InterviewWorkflows")
                        .HasForeignKey("JobDescriptionJobId");

                    b.Navigation("Candidate");

                    b.Navigation("JobDescription");
                });

            modelBuilder.Entity("CandidateScreeningAI.Models.Resume", b =>
                {
                    b.HasOne("CandidateScreeningAI.Models.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("CandidateScreeningAI.Models.JobDescription", b =>
                {
                    b.Navigation("InterviewWorkflows");
                });
#pragma warning restore 612, 618
        }
    }
}
